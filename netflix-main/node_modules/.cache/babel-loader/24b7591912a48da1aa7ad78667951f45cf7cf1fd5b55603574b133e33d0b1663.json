{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\luisf\\\\OneDrive\\\\Documents\\\\UdeM\\\\Paradigmas\\\\ProyectoNetflix\\\\ProyectoNetflix\\\\netflix-main\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Crear el contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para usar el contexto\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n\n// Provider del contexto\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const login = async (email, password) => {\n    setIsLoading(true);\n    // Simular llamada a API (reemplazar con tu API real)\n    return new Promise(resolve => {\n      setTimeout(() => {\n        if (email && password) {\n          const userData = {\n            id: Date.now(),\n            name: email.split('@')[0],\n            email: email,\n            avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${email}`\n          };\n          setUser(userData);\n          setIsLoading(false);\n          resolve({\n            success: true,\n            user: userData\n          });\n        } else {\n          setIsLoading(false);\n          resolve({\n            success: false,\n            error: 'Credenciales inválidas'\n          });\n        }\n      }, 1000);\n    });\n  };\n  const register = async (name, email, password) => {\n    setIsLoading(true);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        if (name && email && password) {\n          const userData = {\n            id: Date.now(),\n            name: name,\n            email: email,\n            avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${email}`\n          };\n          setUser(userData);\n          setIsLoading(false);\n          resolve({\n            success: true,\n            user: userData\n          });\n        } else {\n          setIsLoading(false);\n          resolve({\n            success: false,\n            error: 'Todos los campos son requeridos'\n          });\n        }\n      }, 1000);\n    });\n  };\n  const logout = () => {\n    setUser(null);\n  };\n  const value = {\n    user,\n    isLoading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Zl4aE56CGbXdDoToH9D5SNkGHyo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","login","email","password","Promise","resolve","setTimeout","userData","id","Date","now","name","split","avatar","success","error","register","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/luisf/OneDrive/Documents/UdeM/Paradigmas/ProyectoNetflix/ProyectoNetflix/netflix-main/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n// Crear el contexto\nconst AuthContext = createContext();\n\n// Hook personalizado para usar el contexto\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n\n// Provider del contexto\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const login = async (email, password) => {\n    setIsLoading(true);\n    // Simular llamada a API (reemplazar con tu API real)\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        if (email && password) {\n          const userData = {\n            id: Date.now(),\n            name: email.split('@')[0],\n            email: email,\n            avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${email}`\n          };\n          setUser(userData);\n          setIsLoading(false);\n          resolve({ success: true, user: userData });\n        } else {\n          setIsLoading(false);\n          resolve({ success: false, error: 'Credenciales inválidas' });\n        }\n      }, 1000);\n    });\n  };\n\n  const register = async (name, email, password) => {\n    setIsLoading(true);\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        if (name && email && password) {\n          const userData = {\n            id: Date.now(),\n            name: name,\n            email: email,\n            avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${email}`\n          };\n          setUser(userData);\n          setIsLoading(false);\n          resolve({ success: true, user: userData });\n        } else {\n          setIsLoading(false);\n          resolve({ success: false, error: 'Todos los campos son requeridos' });\n        }\n      }, 1000);\n    });\n  };\n\n  const logout = () => {\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    isLoading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}